(in-package :stumpwm)

(load-module "window-tags")
(load-module "frame-tags")

; (resize-head 0 0 0 1366 76)

;;{{{ variables

;;---
;; Directories
;;---
(setf *home-dir*      (make-pathname :directory (getenv "HOME"))
      *stump-dir*     (merge-pathnames (make-pathname :directory '(:relative "stumpwm")) *home-dir*)
      *data-dir*      (merge-pathnames (make-pathname :directory '(:relative "storage")) *stump-dir*)
      *load-dir*      (merge-pathnames (make-pathname :directory '(:relative "lisp")) *stump-dir*)
      *undo-data-dir* (make-pathname :directory "/dev/shm/.1009")
      *debug-file*    (merge-pathnames (make-pathname :name "debug") *stump-dir*)
      *scratchpad-group-name* ".scratch")

(setf *run-or-raise-all-groups* t)

(setq *useless-gaps-size* 5)
(setq *useless-gaps-on* t)

(load (merge-pathnames (make-pathname :name "gaps" :type "lisp"
                                      :directory '(:relative "vendor")) *load-dir*))


;;}}}
;; {{{ Startup

;;---
;; Startup stuffs
;;---

(setf *run-or-raise-all-groups* t)

;; create given groups while keeping focus on current.
(defmacro make-groups-bg (&rest names)
  (let ((ns (mapcar #'(lambda (n) (concatenate 'string "gnewbg " n)) names)))
    `(run-commands ,@ns)))

;; restore data from previous exit (state StumpWM was last using),
(clear-window-placement-rules)
(setf (group-name
        (first
          (screen-groups (current-screen)))) "MAIN")
(make-groups-bg "WEB")
(make-groups-bg "MISC")
(if (probe-file (data-dir-file "desktop.lisp"))
  (restore-from-file (data-dir-file "desktop.lisp")))

 (restore-window-placement-rules (data-dir-file "tile-rules.lisp"))
(cond ((string-equal (group-name (current-group)) *scratchpad-group-name*) (gother)))

;; redefine run-shell-command for 'zsh', change :shell "", and fix a typo.
(defcommand run-shell-command (cmd &optional collect-output-p)
            ((:shell "execute: "))
            "Run the specified shell command. If @var{collect-output-p} is @code{T} 
            then run the command synchrously and collect the output."
            (if collect-output-p
              (run-prog-collect-output *shell-program* "-c" cmd)
              (run-prog *shell-program* :args (list "-c" cmd) :wait nil)))

(setf *shell-program* (getenv "SHELL"))
(defcommand-alias exec run-shell-command)

;; Run these
(run-shell-command "redshift -l 43:87 -O 7500k")
(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command "exec pkill dzen2 &")
(run-shell-command (format nil "~A/etc/dzen/stumpwm/panel.sh &" (getenv "HOME")))

;; }}}
;; {{{ window stuff

(set-unfocus-color   (make-color-hex "#212121"))
(set-focus-color (make-color-hex "#E84F4F"))
(set-win-bg-color  (make-color-hex "#151515"))

;;---
;; Borders
;;---
(setf *maxsize-border-width*     1
      *transient-border-width*   1
      *normal-border-width*      1
      *window-border-style* :thin)

;; }}}
;; {{{ Keybinds

(set-prefix-key (kbd "M-i"))

(define-key *top-map* (kbd "M-r")       "loadrc")
(define-key *top-map* (kbd "M-R")       "loadrc-forget")
(define-key *top-map* (kbd "M-x")       "exec xrdb ~/.Xresources")

;;---
;; Groups
;;---

(dotimes (i 9)
  (define-key *top-map* (kbd (format nil "M-~A" (1+ i)))
    (format nil "gselect ~A" (1+ i)))
  (define-key *top-map* (kbd (format nil "M-C-~A" (1+ i)))
    (format nil "gmove ~A" (1+ i))))

(defvar *group-map* nil
  "keymap for doing stuff to groups")
  (setf *group-map*
        (let ((m (make-sparse-keymap)))
          (define-key m (kbd "n")   "gnew")
          (define-key m (kbd "f")   "gnew-float")
          (define-key m (kbd "N")   "gnewbg")
          (define-key m (kbd "F")   "gnew-float")
          (define-key m (kbd "k")   "gkill")
          (define-key m (kbd "m")   "gmove")
          (define-key m (kbd "r")   "grename")
          m))
  (define-key *top-map* (kbd "M-g") '*group-map*)

;;---
;; Frames
;;---

  (loop for (vi-key name) in '(("k" "up")
                              ("j" "down")
                              ("h" "left")
                              ("l" "right"))
  do (let ((key-combo (format nil "M-~A" vi-key))
    (shifted-key-combo (format nil "M-~A" (string-upcase vi-key))))
      (define-key *top-map* (kbd key-combo)
        (format nil "move-focus ~A" name))
      (define-key *top-map* (kbd shifted-key-combo)
        (format nil "move-window ~A" name))))
;;---
;; Launch them apps
;;---

;; URxvt, duh!
(defvar *terminal* "urxvt"
  "Command to start a terminal.")

(defvar *launch-map* nil
  "launching them apps makes me happy")
(setf *launch-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "SPC")   "exec bashrun")
        (define-key m (kbd "RET")   (format nil "exec ~A" *terminal*))
        m))
(define-key *top-map* (kbd "M-SPC") '*launch-map*)

;; tmux command to open or attach a new session
(define-key *top-map* (kbd "M-t")          "tmux")

;; }}}
;;{{{ function and command stuffs 

;; apps n stuffs
(defcommand tmux (session) ((:string "Session name: "))
             "Attach tmux session or start a new one"
             (run-prog "/usr/bin/tmux"
                       :args (list "has-session" "-t" session)
                       :wait nil
                       #+sbcl :status-hook
                       #+sbcl #'(lambda (process)
                                  (and (not (sb-ext:process-alive-p process))
                                       (if (eq 1 (sb-ext:process-exit-code process))
                                         (run-shell-command (format nil "~A -e tmux -2 new -s ~A" *terminal* session))
                                         (run-shell-command (format nil "~A -e tmux attach -t ~A" *terminal* session)))))))

;; create a scratchpad group if none exist and toggle between viewing current group and scratchpad group.
;; (idea from Ion3+ window-manager except scratchpad is a group and not a floating frame)
;; (also inspired by another users 'scratchpad' command set, although i found all the functions
;;  and parameters to be wasteful, especially since it's created per screen anyway(?:[untested aspect]))

(defcommand scratchpad () ()
"Create a scratchpad group for current screen, if not found, and toggle between the scatchpad group
and the current group upon reissue of the same command."
  (let* ((sg (find-group (current-screen) *scratchpad-group-name*)) (cg (current-group)))
    (if sg
        (cond ((eq cg sg) (gother)) (t (switch-to-group sg) (message "scratchpad")))
      (progn (gnew *scratchpad-group-name*) (message "scratchpad")))))

;; reassign original commands to *-forget
(defcommand quit-forget () () "Quit StumpWM without remembering current state."
  (with-open-file (stream *debug-file* :direction :io :if-exists :supersede))
  (cond ((find-group (current-screen) *scratchpad-group-name*)
         (if (eq (current-group) (find-group (current-screen) *scratchpad-group-name*))
             (gkill)
           (progn
             (gnext) (kill-group
                      (find-group (current-screen) *scratchpad-group-name*)
                      (current-group))))))
  (throw :top-level :quit))

(defcommand restart-soft-forget () () 
  "Soft Restart StumpWM without remembering current state.
The lisp process isn't restarted. Instead, control jumps
to the very beginning of the stumpwm program. This
differs from RESTART, which restarts the unix process.

Since the process isn't restarted, existing customizations remain
after the restart." 
  (throw :top-level :restart))

(defcommand loadrc-forget () () "Reload the @file{~/.stumpwmrc} file without remember current state."
  (handler-case
   (progn
     (with-restarts-menu (load-rc-file nil)))
   (error (c)
          (message "^B^1*Error loading rc file:^n ~A" c))
   (:no-error (&rest args)
              (declare (ignore args))
              (message "rc file loaded successfully."))))

(defcommand loadrc () () "Reload the @file{~/.stumpwmrc} file while remembering current state."
  (remember-all) (loadrc-forget))

(defcommand restart-soft () ()
  "Soft Restart StumpWM while remembering current state.
The lisp process isn't restarted. Instead, control jumps
to the very beginning of the stumpwm program. This
differs from RESTART, which restarts the unix process.
Since the process isn't restarted, existing customizations remain
after the restart." 
  (remember-all) (restart-soft-forget))

(defcommand-alias restart restart-soft)

(defcommand quit () ()
  "Quit StumpWM while remembering current state."
  (cond ((find-group (current-screen) *scratchpad-group-name*)
         (if (eq (current-group) (find-group (current-screen) *scratchpad-group-name*))
             (gkill)
           (progn
             (gnext) (kill-group
                      (find-group (current-screen) *scratchpad-group-name*)
                      (current-group))))))
  (remember-all) (quit-forget))

;;-------~---~----------~----------~----
;; Dumping
;;-------~---~----------~----------~----

(defun remember-all () ()
"Similiar to remember-group except all information is dumped, useful
for next startup or recalling all undo actions."
  (dump-to-datadir "rules") (dump-to-datadir "desktop"))

;; dump [current]-group (for current-screen), [current]-screen, desktop or window-placement-rules
;; to a dynamically named file in user defined *data-dir*.
(defcommand dump-to-datadir (expr) (:rest)
  "Dump group (from current-screen), screen (current-screen), desktop or rules to file in data-dir.
Just specify what you want to dump and this will dynamically create and name file accordingly."
  (cond ((string-equal expr 'group)
         (let* ((o (make-pathname :name (format nil "screen_~{~A~}_group_~{~A~}"
                                                (list (char (getenv "DISPLAY") 1)) (list (group-name (current-group))))
                                  :type "lisp" :defaults *data-dir*)))
           (dump-group-to-file o) (message "~A dumped" expr)))
        ((string-equal expr 'screen)
         (let* ((o (make-pathname :name (format nil "screen_~{~A~}" (list (char (getenv "DISPLAY") 1)))
                                  :type "lisp" :defaults *data-dir*)))
           (dump-screen-to-file o) (message "~A dumped" expr)))
        ((string-equal expr 'rules)
         (let* ((o (make-pathname :name "tile-rules" :type "lisp" :defaults *data-dir*)))
           (dump-window-placement-rules o) (message "~A dumped" expr)))
        ((string-equal expr 'desktop)
         (let* ((o (make-pathname :name "desktop" :type "lisp" :defaults *data-dir*)))
           (dump-desktop-to-file o) (message "~A dumped" expr)))
        (t (message "dont know how to dump ~a" expr))))

;; dump to file, which is silent, but with more informative prompts.
(defcommand dump-group-to-file (file) ((:rest "group to file: "))
  "Dumps the frames of the current group of the current screen to the named file."
  (dump-to-file (dump-group (current-group)) file))
(defcommand dump-screen-to-file (file) ((:rest "screen to file: "))
  "Dumps the frames of all groups of the current screen to the named file."
  (dump-to-file (dump-screen (current-screen)) file))
(defcommand dump-desktop-to-file (file) ((:rest "desktop to file: "))
  "Dumps the frames of all groups of all screens to the named file."
  (dump-to-file (dump-desktop) file))


;;-------~---~----------~----------~----
;; Groups
;;-------~---~----------~----------~----

(defun remember-group (&optional (group (current-group))) ()
"Remember current group information before calling another command or
function. Combined with 'undo' command this allows for toggling between
the two undo states."
  (if (ensure-directories-exist *undo-data-dir*)
    (when group
      (dump-group-to-file
        (make-pathname :name (format nil "screen_~{~A~}_group_~{~A~}"
        (list (char (getenv "DISPLAY") 1)) (list (group-name (current-group))))
        :type "lisp" :defaults *undo-data-dir*)))))

(defun fmt-group-status (group)
  (let ((screen (group-screen group)))
    (cond ((eq group (screen-current-group screen))
           #\*)
          ((and (typep (second (screen-groups screen)) 'group)
                (eq group (second (screen-groups screen))))
           #\+)
          (t #\-))))


;; restore [current]-group (for current-screen), [current]-screen, desktop or window-placement-rules
;; from a previously created file (more correctly from DUMP-TO-DATADIR) in user defined *data-dir*.
(defcommand restore-from-datadir (expr) (:rest)
"Restore file from data-dir, previously created by 'dump-to-datadir', according to what you specify.
You may restore group (for current-screen), screen (for current-screen), desktop or rules. This will
restore file dynamically by pattern patching, according to what you're restoring, to file name by
looking at what you're currently using.
 
E.g. if you're in group 2 on screen 0 and you enter 'restore-from-datadir group' it will look for a
file named 'screen_0_group_2.lisp' (created by accompanying 'dump-to-datadir') in your data-dir and
restore it. If no matching file is found it will skip loading of any files and print an error message.
 
Note: if restoring a group file was successful then an undo state is created so you can technically
undo the loading of that file. There are no undo states when loading 'screen', 'desktop' or 'rules'."
  (cond ((string-equal expr 'group)
          (let* ((i (make-pathname :name (format nil "screen_~{~A~}_group_~{~A~}"
                    (list (char (getenv "DISPLAY") 1)) (list (group-name (current-group))))
                    :type "lisp" :defaults *data-dir*)))
            (if (probe-file i)
                (progn (restore-from-file i) (remember-group) (message "~A restored" expr))
              (message "unable to find valid ~A file in data dir" expr))))
        ((string-equal expr 'screen)
          (let* ((i (make-pathname :name (format nil "screen_~{~A~}" (list (char (getenv "DISPLAY") 1)))
                    :type "lisp" :defaults *data-dir*)))
            (if (probe-file i)
                (progn (restore-from-file i) (message "~A restored" expr))
              (message "unable to find valid ~A file in data dir" expr))))
        ((string-equal expr 'rules)
          (if (probe-file (data-dir-file "tile-rules.lisp"))
              (progn (restore-window-placement-rules (data-dir-file "tile-rules.lisp"))
                     (message "~A restored" expr))
            (message "unable to find valid ~A file in data dir" expr)))
        ((string-equal expr 'desktop)
          (if (probe-file (data-dir-file "desktop.lisp"))
              (progn (restore-from-file (data-dir-file "tile-rules.lisp")) (message "~A restored" expr))
            (message "unable to find valid ~A file in data dir" expr)))
        (t (message "dont know how to restore ~a" expr))))
;;}}}

; vim: set ft=lisp ts=4 sw=4 sts=4:
